/*
 * Copyright 2016 Herman Cheung
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'nebula.provided-base'

artifactId='electricspock-core'
group='hkhc.electricspock'

//targetCompatibility = '1.7'
//sourceCompatibility = '1.7'

sourceSets {
    test {
        // Class.getResource won't work in unit test without this line.
        // It ensure the test resources are in the same directory as classes
        output.resourcesDir = "build/classes/test"
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Workaround for issue https://issuetracker.google.com/issues/65712492
    testRuntimeOnly files("build/classes/groovy/test")
    testRuntimeOnly files("build/classes/groovy/main")

    compile "org.robolectric:robolectric:3.5.1", {
        exclude group:'junit', module: 'junit'
    }

    compile 'org.codehaus.groovy:groovy-all:2.4.12'
    compile "org.spockframework:spock-core:1.1-groovy-2.4"

    compile 'org.jetbrains:annotations-java5:15.0'
    provided 'org.robolectric:android-all:7.1.0_r7-robolectric-0'
    compile 'junit:junit:4.12'

    testCompile 'org.assertj:assertj-core:1.7.1'

}

def runtimeClasspath = project.sourceSets.test.runtimeClasspath
println "runtimeClasspath" + runtimeClasspath.asPath

def testClass = project.sourceSets.test.output.classesDirs
for (Object c : testClass) {
    println "testClass " + c.toString()
}

def allJava = project.sourceSets.test.allJava.srcDirs
for (Object c : allJava) {
    println "allJava " + c.toString()
}

def allSource = project.sourceSets.test.allSource.srcDirs
for (Object c : allSource) {
    println "allSource " + c.toString()
}



